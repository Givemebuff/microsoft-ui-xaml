//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.57+g2cc4f0c931
//       
//       Command:
//           LottieGen -Language Cppwinrt -InputFile Controls_01_Checkmark.json
//       
//       Input file:
//           Controls_01_Checkmark.json (26406 bytes created 16:32-08:00 Nov 23 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   247 |
// |--------------------------+-------|
// | Expression animators     |    42 |
// | KeyFrame animators       |    32 |
// | Reference parameters     |    50 |
// | Expression operations    |    40 |
// |--------------------------+-------|
// | Animated brushes         |    10 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    11 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |    21 |
// |--------------------------+-------|
// | Brushes                  |    10 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "Controls_01_Checkmark.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(Controls_01_Checkmark)
}

#include "AnimatedVisuals\Controls_01_Checkmark.g.cpp"

class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};

class Controls_01_Checkmark_AnimatedVisual : public winrt::implements<Controls_01_Checkmark_AnimatedVisual,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 36666666L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground_0{ nullptr };
    CompositionColorBrush _themeColor_Foreground_1{ nullptr };
    CompositionColorBrush _themeColor_Foreground_2{ nullptr };
    CompositionColorBrush _themeColor_Foreground_3{ nullptr };
    CompositionColorBrush _themeColor_Foreground_4{ nullptr };
    CompositionColorBrush _themeColor_Foreground_5{ nullptr };
    CompositionColorBrush _themeColor_Foreground_6{ nullptr };
    CompositionColorBrush _themeColor_Foreground_7{ nullptr };
    CompositionColorBrush _themeColor_Foreground_8{ nullptr };
    CompositionColorBrush _themeColor_Foreground_9{ nullptr };
    CompositionPath _path{ nullptr };
    CompositionPathGeometry _pathGeometry_0{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    void BindProperty2(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName0,
        CompositionObject referencedObject0,
        winrt::hstring referenceParameterName1,
        CompositionObject referencedObject1)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector2KeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->BeginFigure({ -12.375F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -4.45300007F, 8.17199993F });
        sink->AddLine({ 13.75F, -10.125F });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_0()
    {
        const auto result = _themeColor_Foreground_0 = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*0.35,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_1()
    {
        const auto result = _themeColor_Foreground_1 = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToPressedOn
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_2()
    {
        const auto result = _themeColor_Foreground_2 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 0.349999994F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0p35_to_1_0(), _rootProgress);
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - PressedOnToPointerOverOff
    // Offset:<24, 24>
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_3()
    {
        const auto result = _themeColor_Foreground_3 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 1.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_1_to_0p35_0(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToPressedOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_4()
    {
        const auto result = _themeColor_Foreground_4 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 1.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_1_to_0p35_1(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOffToNormalOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_5()
    {
        const auto result = _themeColor_Foreground_5 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 0.349999994F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0p35_to_0(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOffToPointerOverOn
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_6()
    {
        const auto result = _themeColor_Foreground_6 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 0.349999994F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0p35_to_1_1(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOnToPointerOverOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_7()
    {
        const auto result = _themeColor_Foreground_7 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 1.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_1_to_0p35_2(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToPressedOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_8()
    {
        const auto result = _themeColor_Foreground_8 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 0.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0_to_0p35_0(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToPointerOverOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_9()
    {
        const auto result = _themeColor_Foreground_9 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 0.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0_to_0p35_1(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Layer: Check - PressedOffToNormalOn
    CompositionContainerShape ContainerShape_0()
    {
        const auto result = _c.CreateContainerShape();
        result.Scale({ 0.0F, 0.0F });
        const auto shapes = result.Shapes();
        // Offset:<24.25, 24>
        shapes.Append(SpriteShape_00());
        // Offset:<24.25, 24>
        shapes.Append(SpriteShape_01());
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_00(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Layer: Check - PressedOffToPointerOverOn
    CompositionContainerShape ContainerShape_1()
    {
        const auto result = _c.CreateContainerShape();
        result.Scale({ 0.0F, 0.0F });
        const auto shapes = result.Shapes();
        // Offset:<24.25, 24>
        shapes.Append(SpriteShape_02());
        // Offset:<24.25, 24>
        shapes.Append(SpriteShape_03());
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_01(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Layer: Check - PressedOnToPointerOverOff
    CompositionContainerShape ContainerShape_2()
    {
        const auto result = _c.CreateContainerShape();
        result.Scale({ 0.0F, 0.0F });
        const auto shapes = result.Shapes();
        // Offset:<24, 24>
        shapes.Append(SpriteShape_06());
        // Offset:<24, 24>
        shapes.Append(SpriteShape_07());
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_04(), _rootProgress);
        return result;
    }

    CompositionPath Path()
    {
        const auto result = _path = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry()));
        return result;
    }

    CompositionPathGeometry PathGeometry_0()
    {
        return _pathGeometry_0 = _c.CreatePathGeometry(Path());
    }

    // - - Layer aggregator
    // - Layer: Check - PressedOffToNormalOn
    // Offset:<24.25, 24>
    CompositionPathGeometry PathGeometry_1()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_0(), RootProgress());
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - PressedOffToPointerOverOn
    // Offset:<24.25, 24>
    CompositionPathGeometry PathGeometry_2()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_1(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToNormalOff
    CompositionPathGeometry PathGeometry_3()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_0(), _rootProgress);
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - PressedOnToPointerOverOff
    // Offset:<24, 24>
    CompositionPathGeometry PathGeometry_4()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_1(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToNormalOn
    CompositionPathGeometry PathGeometry_5()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_2(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOnToNormalOff
    CompositionPathGeometry PathGeometry_6()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_2(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToNormalOn
    // Path 1
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_0(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_0());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToNormalOn
    // Path 1
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_1(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_1());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToPointerOverOn
    // Path 1
    CompositionSpriteShape SpriteShape_02()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToPointerOverOn
    // Path 1
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_2(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_2());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_02(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_05()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_3(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_03(), _rootProgress);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToPointerOverOff
    // Path 1
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_3());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToPointerOverOff
    // Path 1
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_4(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_08()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_4());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_05(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_06(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_5());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_07(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_11()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_6());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_08(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_12()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_09(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_13()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_10(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_14()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_7());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_11(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_15()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_8());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_12(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_16()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(ThemeColor_Foreground_9());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_13(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_17()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_5(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_14(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_18()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_15(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_19()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.Scale({ 0.0F, 0.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_16(), _rootProgress);
        return result;
    }

    // Layer aggregator
    // Path 1
    CompositionSpriteShape SpriteShape_20()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_6(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(5.5F);
        StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_17(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        // Layer aggregator
        result.Children().InsertAtTop(ShapeVisual_0());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_2()
    {
        return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.75F, 0.0F }, { 0.833000004F, 0.833000004F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_0p35_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.318181813F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.359090894F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_0p35_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.272727281F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.313636363F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_0p35_to_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.550000012F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.586363614F, 0.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_0p35_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.772727251F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.813636363F, 1.0F, CubicBezierEasingFunction_1());
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_0p35_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.540909111F, 1.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_0p35_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.681818187F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.722727299F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_0p35_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.636363626F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.677272737F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_0p35_2()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.363636374F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.404545456F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - - Layer aggregator
    // - - Layer: Check - PressedOffToNormalOn
    // -  Offset:<24.25, 24>
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.909090936F, 0.0F, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.9909091F, 1.0F, CubicBezierEasingFunction_0());
        return result;
    }

    // - - - Layer aggregator
    // - - Layer: Check - PressedOffToPointerOverOn
    // -  Offset:<24.25, 24>
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.818181813F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.899999976F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - NormalOffToNormalOn
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_2()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.13636364F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.263636351F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - PressedOnToNormalOff
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.727272749F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.763636351F, 1.0F, CubicBezierEasingFunction_2());
        return result;
    }

    // - - - Layer aggregator
    // - - Layer: Check - PressedOnToPointerOverOff
    // -  Offset:<24, 24>
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.681818187F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.718181789F, 1.0F, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - Layer aggregator
    // - Layer: Check - NormalOnToNormalOff 
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_2()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.0363636352F, 1.0F, _cubicBezierEasingFunction_2);
        return result;
    }

    // Layer aggregator
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Check - PressedOffToNormalOn
        shapes.Append(ContainerShape_0());
        // Layer: Check - PressedOffToPointerOverOn
        shapes.Append(ContainerShape_1());
        // Layer: Check - PressedOffToPressedOn
        shapes.Append(SpriteShape_04());
        // Layer: Check - PressedOnToNormalOff
        shapes.Append(SpriteShape_05());
        // Layer: Check - PressedOnToPointerOverOff
        shapes.Append(ContainerShape_2());
        // Layer: Check - PressedOnToPressedOff
        shapes.Append(SpriteShape_08());
        // Layer: Check - PointerOverOffToPressedOff
        shapes.Append(SpriteShape_09());
        // Layer: Check - PointerOverOffToNormalOff
        shapes.Append(SpriteShape_10());
        // Layer: Check - PointerOverOffToPointerOverOn
        shapes.Append(SpriteShape_11());
        // Layer: Check - PointerOverOnToPressedOn
        shapes.Append(SpriteShape_12());
        // Layer: Check - PointerOverOnToNormalOn
        shapes.Append(SpriteShape_13());
        // Layer: Check - PointerOverOnToPointerOverOff
        shapes.Append(SpriteShape_14());
        // Layer: Check - NormalOffToPressedOff
        shapes.Append(SpriteShape_15());
        // Layer: Check - NormalOffToPointerOverOff
        shapes.Append(SpriteShape_16());
        // Layer: Check - NormalOffToNormalOn
        shapes.Append(SpriteShape_17());
        // Layer: Check - NormalOnToPressedOn
        shapes.Append(SpriteShape_18());
        // Layer: Check - NormalOnToPointerOverOn
        shapes.Append(SpriteShape_19());
        // Layer: Check - NormalOnToNormalOff
        shapes.Append(SpriteShape_20());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToNormalOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_00()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.909090936F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToPointerOverOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_01()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.818181813F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.909090936F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOffToPressedOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_02()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.772727251F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.818181813F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToNormalOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_03()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.727272749F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.772727251F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToPointerOverOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_04()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.681818187F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.727272749F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PressedOnToPressedOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_05()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.636363626F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.681818187F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOffToPressedOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_06()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.590909064F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.636363626F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOffToNormalOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_07()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.545454562F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.590909064F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOffToPointerOverOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_08()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.5F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.545454562F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOnToPressedOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_09()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.454545468F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.5F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOnToNormalOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_10()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.409090906F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.454545468F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - PointerOverOnToPointerOverOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_11()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.363636374F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.409090906F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToPressedOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_12()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.318181813F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.363636374F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToPointerOverOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_13()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.272727281F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.318181813F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOffToNormalOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_14()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.13636364F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.272727281F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOnToPressedOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_15()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0909090936F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.13636364F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOnToPointerOverOn
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_16()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0454545468F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.0909090936F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    // - Layer aggregator
    // Layer: Check - NormalOnToNormalOff
    Vector2KeyFrameAnimation ShapeVisibilityAnimation_17()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0454545468F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_01_Checkmark_AnimatedVisual(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 Controls_01_Checkmark::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet Controls_01_Checkmark::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color Controls_01_Checkmark::Foreground()
{
    return _themeForeground;
}

void Controls_01_Checkmark::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_01_Checkmark::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (Controls_01_Checkmark_AnimatedVisual::IsRuntimeCompatible())
    {
        return winrt::make<Controls_01_Checkmark_AnimatedVisual>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_01_Checkmark::TryCreateAnimatedIconVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

double Controls_01_Checkmark::FrameToProgress(double frameNumber)
{
    return frameNumber / 220.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_01_Checkmark::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalOnToNormalOff_Start", 0.0 },
            { L"NormalOnToNormalOff_End", 0.0409090909090909 },
            { L"NormalOnToPointerOverOn_Start", 0.05 },
            { L"NormalOnToPointerOverOn_End", 0.0818181818181818 },
            { L"NormalOnToPressedOn_Start", 0.0909090909090909 },
            { L"NormalOnToPressedOn_End", 0.131818181818182 },
            { L"NormalOffToNormalOn_Start", 0.136363636363636 },
            { L"NormalOffToNormalOn_End", 0.268181818181818 },
            { L"NormalOffToPointerOverOff_Start", 0.272727272727273 },
            { L"NormalOffToPointerOverOff_End", 0.313636363636364 },
            { L"NormalOffToPressedOff_Start", 0.318181818181818 },
            { L"NormalOffToPressedOff_End", 0.359090909090909 },
            { L"PointerOverOnToPointerOverOff_Start", 0.363636363636364 },
            { L"PointerOverOnToPointerOverOff_End", 0.404545454545455 },
            { L"PointerOverOnToNormalOn_Start", 0.409090909090909 },
            { L"PointerOverOnToNormalOn_End", 0.45 },
            { L"PointerOverOnToPressedOn_Start", 0.454545454545455 },
            { L"PointerOverOnToPressedOn_End", 0.495454545454545 },
            { L"PointerOverOffToPointerOverOn_Start", 0.5 },
            { L"PointerOverOffToPointerOverOn_End", 0.540909090909091 },
            { L"PointerOverOffToNormalOff_Start", 0.55 },
            { L"PointerOverOffToNormalOff_End", 0.586363636363636 },
            { L"PointerOverOffToPressedOff_Start", 0.590909090909091 },
            { L"PointerOverOffToPressedOff_End", 0.631818181818182 },
            { L"PressedOnToPressedOff_Start", 0.636363636363636 },
            { L"PressedOnToPressedOff_End", 0.677272727272727 },
            { L"PressedOnToPointerOverOff_Start", 0.681818181818182 },
            { L"PressedOnToPointerOverOff_End", 0.722727272727273 },
            { L"PressedOnToNormalOff_Start", 0.727272727272727 },
            { L"PressedOnToNormalOff_End", 0.768181818181818 },
            { L"PressedOffToPressedOn_Start", 0.772727272727273 },
            { L"PressedOffToPressedOn_End", 0.813636363636364 },
            { L"PressedOffToPointerOverOn_Start", 0.818181818181818 },
            { L"PressedOffToPointerOverOn_End", 0.904545454545455 },
            { L"PressedOffToNormalOn_Start", 0.909090909090909 },
            { L"PressedOffToNormalOn_End", 0.995454545454545 },
        }
    ).GetView();
}

void Controls_01_Checkmark::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void Controls_01_Checkmark::SetScalarProperty(hstring const&, double)
{
}
