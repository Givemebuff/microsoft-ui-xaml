#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.104+geebe28e7e9
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile Controls_06_DownChevron_DropDown.json
//       
//       Input file:
//           Controls_06_DownChevron_DropDown.json (11111 bytes created 12:28-08:00 Feb 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "common.h"
#include "AnimatedVisuals\Controls_06_DownChevron_DropDown.g.h"

// Name:        Controls_06_DownChevron_DropDown+SplitBtn
// Frame rate:  60 fps
// Frame count: 50
// Duration:    833.3 mS
// ____________________________________________________________________________________________
// |           Marker           |           Constant           | Frame |  mS   |   Progress   |
// |____________________________|______________________________|_______|_______|______________|
// | NormalToPointerOver_Start  | M_NormalToPointerOver_Start  |     0 |   0.0 | 0.0F         |
// | NormalToPointerOver_End    | M_NormalToPointerOver_End    |     9 | 150.2 | 0.180199996F |
// | NormalToPressed_Start      | M_NormalToPressed_Start      |    10 | 166.8 | 0.200200006F |
// | NormalToPressed_End        | M_NormalToPressed_End        |    14 | 233.5 | 0.280200005F |
// | PointerOverToNormal_Start  | M_PointerOverToNormal_Start  |    15 | 250.2 | 0.300199986F |
// | PointerOverToNormal_End    | M_PointerOverToNormal_End    |    24 | 400.2 | 0.480199993F |
// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |    25 | 416.8 | 0.500199974F |
// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    29 | 483.5 | 0.580200016F |
// | PressedToNormal_Start      | M_PressedToNormal_Start      |    30 | 500.2 | 0.600199997F |
// | PressedToNormal_End        | M_PressedToNormal_End        |    44 | 733.5 | 0.880200028F |
// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    45 | 750.2 | 0.900200009F |
// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    49 | 816.8 | 0.980199993F |
// --------------------------------------------------------------------------------------------
// _______________________________________________________
// | Theme property |  Accessor  | Type  | Default value |
// |________________|____________|_______|_______________|
// | Foreground     | Foreground | Color |   #FF060808   |
// -------------------------------------------------------

class Controls_06_DownChevron_DropDown
    : public winrt::implementation::Controls_06_DownChevron_DropDownT<Controls_06_DownChevron_DropDown>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x06, 0x08, 0x08 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 0.833 seconds.
    static constexpr int64_t c_durationTicks{ 8333333L };

    // Marker: NormalToPointerOver_Start.
    static constexpr float M_NormalToPointerOver_Start{ 0.0F };

    // Marker: NormalToPointerOver_End.
    static constexpr float M_NormalToPointerOver_End{ 0.180199996F };

    // Marker: NormalToPressed_Start.
    static constexpr float M_NormalToPressed_Start{ 0.200200006F };

    // Marker: NormalToPressed_End.
    static constexpr float M_NormalToPressed_End{ 0.280200005F };

    // Marker: PointerOverToNormal_Start.
    static constexpr float M_PointerOverToNormal_Start{ 0.300199986F };

    // Marker: PointerOverToNormal_End.
    static constexpr float M_PointerOverToNormal_End{ 0.480199993F };

    // Marker: PointerOverToPressed_Start.
    static constexpr float M_PointerOverToPressed_Start{ 0.500199974F };

    // Marker: PointerOverToPressed_End.
    static constexpr float M_PointerOverToPressed_End{ 0.580200016F };

    // Marker: PressedToNormal_Start.
    static constexpr float M_PressedToNormal_Start{ 0.600199997F };

    // Marker: PressedToNormal_End.
    static constexpr float M_PressedToNormal_End{ 0.880200028F };

    // Marker: PressedToPointerOver_Start.
    static constexpr float M_PressedToPointerOver_Start{ 0.900200009F };

    // Marker: PressedToPointerOver_End.
    static constexpr float M_PressedToPointerOver_End{ 0.980199993F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x06, 0x08, 0x08 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    // Gets the number of frames in the animation.
    double FrameCount();

    // Gets the framerate of the animation.
    double Framerate();

    // Gets the duration of the animation.
    winrt::Windows::Foundation::TimeSpan Duration();

    // Converts a zero-based frame number to the corresponding progress value denoting the
    // start of the frame.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
