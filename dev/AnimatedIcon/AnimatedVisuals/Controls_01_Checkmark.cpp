//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.104+geebe28e7e9
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile Controls_01_Checkmark.json
//       
//       Input file:
//           Controls_01_Checkmark.json (34078 bytes created 16:32-08:00 Nov 23 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   297 |
// |--------------------------+-------|
// | Expression animators     |    36 |
// | KeyFrame animators       |    33 |
// | Reference parameters     |    37 |
// | Expression operations    |    12 |
// |--------------------------+-------|
// | Animated brushes         |     3 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     4 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |    20 |
// | ShapeVisuals             |    19 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |    22 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals\Controls_01_Checkmark.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(Controls_01_Checkmark)
}
#include "AnimatedVisuals\Controls_01_Checkmark.g.cpp"


class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};
class Controls_01_Checkmark_AnimatedVisual : public winrt::implements<Controls_01_Checkmark_AnimatedVisual,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 37333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground_0{ nullptr };
    CompositionColorBrush _themeColor_Foreground_1{ nullptr };
    CompositionColorBrush _themeColor_Foreground_2{ nullptr };
    CompositionPath _path{ nullptr };
    CompositionPathGeometry _pathGeometry_1{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    void BindProperty2(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName0,
        CompositionObject referencedObject0,
        winrt::hstring referenceParameterName1,
        CompositionObject referencedObject1)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        return result;
    }

    // PreComp layer: Indeterminate State
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_00()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.982142866F, true);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_01()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.892857134F, true);
        result.InsertKeyFrame(0.982142866F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_02()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.803571403F, true);
        result.InsertKeyFrame(0.892857134F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_03()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.758928597F, true);
        result.InsertKeyFrame(0.803571403F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_04()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.714285731F, true);
        result.InsertKeyFrame(0.758928597F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_05()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.669642866F, true);
        result.InsertKeyFrame(0.714285731F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_06()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.625F, true);
        result.InsertKeyFrame(0.669642866F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 12 - PointerOverOffToPressedOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_07()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.580357134F, true);
        result.InsertKeyFrame(0.625F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_08()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.535714269F, true);
        result.InsertKeyFrame(0.580357134F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_09()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.491071433F, true);
        result.InsertKeyFrame(0.535714269F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 09 - PointerOverOnToPressedOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_10()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.446428567F, true);
        result.InsertKeyFrame(0.491071433F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 08 - PointerOverOnToNormalOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_11()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.401785702F, true);
        result.InsertKeyFrame(0.446428567F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_12()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.357142866F, true);
        result.InsertKeyFrame(0.401785702F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_13()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.3125F, true);
        result.InsertKeyFrame(0.357142866F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_14()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.267857134F, true);
        result.InsertKeyFrame(0.3125F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_15()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.133928567F, true);
        result.InsertKeyFrame(0.267857134F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 03 - NormalOnToPressedOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_16()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.0892857164F, true);
        result.InsertKeyFrame(0.133928567F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 02 - NormalOnToPointerOverOn
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_17()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.0446428582F, true);
        result.InsertKeyFrame(0.0892857164F, false);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_18()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.0446428582F, false);
        return result;
    }

    // - - - - PreComp layer: Indeterminate State
    // - - - Transforms for Indeterminate State Scale(1,1,0)
    // - -  Offset:<24, 24>
    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->BeginFigure({ -11.75F, -0.125F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 11.875F, -0.125F });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->BeginFigure({ -12.375F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -4.45300007F, 8.17199993F });
        sink->AddLine({ 13.75F, -10.125F });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_0()
    {
        const auto result = _themeColor_Foreground_0 = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_1()
    {
        const auto result = _themeColor_Foreground_1 = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*0.35,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // - Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Scale(1,1,0)
    // Layer: Check - PressedOnToPointerOverOff
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground_2()
    {
        const auto result = _themeColor_Foreground_2 = _c.CreateColorBrush();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Opacity0", 1.0F);
        BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
        StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_1_to_0p35(), _rootProgress);
        return result;
    }

    CompositionPath Path()
    {
        const auto result = _path = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1()));
        return result;
    }

    // - - PreComp layer: Indeterminate State
    // - Transforms for Indeterminate State Scale(1,1,0)
    // Offset:<24, 24>
    CompositionPathGeometry PathGeometry_0()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
    }

    CompositionPathGeometry PathGeometry_1()
    {
        return _pathGeometry_1 = _c.CreatePathGeometry(Path());
    }

    // - - PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    // - Transforms for Controls - 01 - Check - 18 - PressedOffToNormalOn Scale(1,1,0)
    // Layer: Check - PressedOffToNormalOn
    CompositionPathGeometry PathGeometry_2()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_0(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // - Transforms for Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // Scale(1,1,0)
    // Layer: Check - PressedOffToPointerOverOn
    CompositionPathGeometry PathGeometry_3()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_1(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    // - Transforms for Controls - 01 - Check - 15 - PressedOnToNormalOff Scale(1,1,0)
    // Offset:<24, 24>
    CompositionPathGeometry PathGeometry_4()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_0(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // - Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Scale(1,1,0)
    // Layer: Check - PressedOnToPointerOverOff
    CompositionPathGeometry PathGeometry_5()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_1(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    // - Transforms for Controls - 01 - Check - 04 - NormalOffToNormalOn Scale(1,1,0)
    // Offset:<24, 24>
    CompositionPathGeometry PathGeometry_6()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1_2(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff 
    // - Transforms for Controls - 01 - Check - 01 - NormalOnToNormalOff  Scale(1,1,0)
    // Offset:<24, 24>
    CompositionPathGeometry PathGeometry_7()
    {
        const auto result = _c.CreatePathGeometry(_path);
        StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_1_2(), _rootProgress);
        return result;
    }

    // - PreComp layer: Indeterminate State
    // Transforms for Indeterminate State Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_0(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_0());
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    // Transforms for Controls - 01 - Check - 18 - PressedOffToNormalOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_1(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_1());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    // Transforms for Controls - 01 - Check - 18 - PressedOffToNormalOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_02()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_2(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // Transforms for Controls - 01 - Check - 17 - PressedOffToPointerOverOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_1);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // Transforms for Controls - 01 - Check - 17 - PressedOffToPointerOverOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<24.25, 24>
        const auto result = CreateSpriteShape(PathGeometry_3(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.25F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
    // Transforms for Controls - 01 - Check - 16 - PressedOffToPressedOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_05()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    // Transforms for Controls - 01 - Check - 15 - PressedOnToNormalOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_4(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(ThemeColor_Foreground_2());
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_08()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_5(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
    // Transforms for Controls - 01 - Check - 13 - PressedOnToPressedOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 12 - PointerOverOffToPressedOff
    // Transforms for Controls - 01 - Check - 12 - PointerOverOffToPressedOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
    // Transforms for Controls - 01 - Check - 11 - PointerOverOffToNormalOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_11()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    // Transforms for Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    // Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_12()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 09 - PointerOverOnToPressedOn
    // Transforms for Controls - 01 - Check - 09 - PointerOverOnToPressedOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_13()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 08 - PointerOverOnToNormalOn
    // Transforms for Controls - 01 - Check - 08 - PointerOverOnToNormalOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_14()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    // Transforms for Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    // Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_15()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
    // Transforms for Controls - 01 - Check - 06 - NormalOffToPressedOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_16()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
    // Transforms for Controls - 01 - Check - 05 - NormalOffToPointerOverOff Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_17()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    // Transforms for Controls - 01 - Check - 04 - NormalOffToNormalOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_18()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_6(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 03 - NormalOnToPressedOn
    // Transforms for Controls - 01 - Check - 03 - NormalOnToPressedOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_19()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 02 - NormalOnToPointerOverOn
    // Transforms for Controls - 01 - Check - 02 - NormalOnToPointerOverOn Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_20()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff 
    // Transforms for Controls - 01 - Check - 01 - NormalOnToNormalOff  Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_21()
    {
        // Offset:<24, 24>
        const auto result = CreateSpriteShape(PathGeometry_7(), { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
        result.StrokeBrush(_themeColor_Foreground_0);
        result.StrokeDashCap(CompositionStrokeCap::Round);
        result.StrokeStartCap(CompositionStrokeCap::Round);
        result.StrokeEndCap(CompositionStrokeCap::Round);
        result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
        result.StrokeMiterLimit(2.0F);
        result.StrokeThickness(4.0F);
        return result;
    }

    // PreComp layer: Indeterminate State
    ContainerVisual ContainerVisual_00()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Indeterminate State Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_00());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_00(), RootProgress());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    ContainerVisual ContainerVisual_01()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 18 - PressedOffToNormalOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_01());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_01(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    ContainerVisual ContainerVisual_02()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 17 - PressedOffToPointerOverOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_02());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_02(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
    ContainerVisual ContainerVisual_03()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 16 - PressedOffToPressedOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_03());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_03(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    ContainerVisual ContainerVisual_04()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 15 - PressedOnToNormalOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_04());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_04(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    ContainerVisual ContainerVisual_05()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_05());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_05(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
    ContainerVisual ContainerVisual_06()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 13 - PressedOnToPressedOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_06());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_06(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 12 - PointerOverOffToPressedOff
    ContainerVisual ContainerVisual_07()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 12 - PointerOverOffToPressedOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_07());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_07(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
    ContainerVisual ContainerVisual_08()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 11 - PointerOverOffToNormalOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_08());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_08(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    ContainerVisual ContainerVisual_09()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
        // Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_09());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_09(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 09 - PointerOverOnToPressedOn
    ContainerVisual ContainerVisual_10()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 09 - PointerOverOnToPressedOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_10());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_10(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 08 - PointerOverOnToNormalOn
    ContainerVisual ContainerVisual_11()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 08 - PointerOverOnToNormalOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_11());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_11(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    ContainerVisual ContainerVisual_12()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
        // Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_12());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_12(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
    ContainerVisual ContainerVisual_13()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 06 - NormalOffToPressedOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_13());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_13(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
    ContainerVisual ContainerVisual_14()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 05 - NormalOffToPointerOverOff Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_14());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_14(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    ContainerVisual ContainerVisual_15()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 04 - NormalOffToNormalOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_15());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_15(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 03 - NormalOnToPressedOn
    ContainerVisual ContainerVisual_16()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 03 - NormalOnToPressedOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_16());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_16(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 02 - NormalOnToPointerOverOn
    ContainerVisual ContainerVisual_17()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 02 - NormalOnToPointerOverOn Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_17());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_17(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff
    ContainerVisual ContainerVisual_18()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 01 - Check - 01 - NormalOnToNormalOff  Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_18());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_18(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Indeterminate State
        children.InsertAtTop(ContainerVisual_00());
        // PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
        children.InsertAtTop(ContainerVisual_01());
        // PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
        children.InsertAtTop(ContainerVisual_02());
        // PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
        children.InsertAtTop(ContainerVisual_03());
        // PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
        children.InsertAtTop(ContainerVisual_04());
        // PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
        children.InsertAtTop(ContainerVisual_05());
        // PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
        children.InsertAtTop(ContainerVisual_06());
        // PreComp layer: Controls - 01 - Check - 12 - PointerOverOffToPressedOff
        children.InsertAtTop(ContainerVisual_07());
        // PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
        children.InsertAtTop(ContainerVisual_08());
        // PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
        children.InsertAtTop(ContainerVisual_09());
        // PreComp layer: Controls - 01 - Check - 09 - PointerOverOnToPressedOn
        children.InsertAtTop(ContainerVisual_10());
        // PreComp layer: Controls - 01 - Check - 08 - PointerOverOnToNormalOn
        children.InsertAtTop(ContainerVisual_11());
        // PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
        children.InsertAtTop(ContainerVisual_12());
        // PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
        children.InsertAtTop(ContainerVisual_13());
        // PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
        children.InsertAtTop(ContainerVisual_14());
        // PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
        children.InsertAtTop(ContainerVisual_15());
        // PreComp layer: Controls - 01 - Check - 03 - NormalOnToPressedOn
        children.InsertAtTop(ContainerVisual_16());
        // PreComp layer: Controls - 01 - Check - 02 - NormalOnToPointerOverOn
        children.InsertAtTop(ContainerVisual_17());
        // PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff
        children.InsertAtTop(ContainerVisual_18());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_2()
    {
        return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.75F, 0.0F }, { 0.833000004F, 0.833000004F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // Opacity0
    ScalarKeyFrameAnimation Opacity0ScalarAnimation_1_to_0p35()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.669642866F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.709821403F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
    // Transforms for Controls - 01 - Check - 06 - NormalOffToPressedOff Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_0p35_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.3125F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.352678567F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
    // Transforms for Controls - 01 - Check - 05 - NormalOffToPointerOverOff Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_0p35_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.267857134F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.308035702F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
    // Transforms for Controls - 01 - Check - 11 - PointerOverOffToNormalOff Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_0p35_to_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.535714269F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.575892866F, 0.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
    // Transforms for Controls - 01 - Check - 16 - PressedOffToPressedOn Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_0p35_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.758928597F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.799107134F, 1.0F, CubicBezierEasingFunction_1());
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    // Transforms for Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    // Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_0p35_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.349999994F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.491071433F, 0.349999994F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.53125F, 1.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
    // Transforms for Controls - 01 - Check - 13 - PressedOnToPressedOff Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0p35_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.625F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.665178597F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    // Transforms for Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    // Scale(1,1,0)
    // Layer opacity animation
    ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0p35_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.357142866F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.397321433F, 0.349999994F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    // - - Transforms for Controls - 01 - Check - 18 - PressedOffToNormalOn Scale(1,1,0)
    // - Layer: Check - PressedOffToNormalOn
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.892857134F, 0.0F, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.973214269F, 1.0F, CubicBezierEasingFunction_0());
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // - - Transforms for Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // Scale(1,1,0)
    // - Layer: Check - PressedOffToPointerOverOn
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.803571403F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.883928597F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    // - - Transforms for Controls - 01 - Check - 04 - NormalOffToNormalOn Scale(1,1,0)
    // -  Offset:<24, 24>
    // TrimEnd
    ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_2()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.133928567F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.258928567F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    // - - Transforms for Controls - 01 - Check - 15 - PressedOnToNormalOff Scale(1,1,0)
    // -  Offset:<24, 24>
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_0()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.714285731F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.75F, 1.0F, CubicBezierEasingFunction_2());
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // - - Transforms for Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Scale(1,1,0)
    // - Layer: Check - PressedOnToPointerOverOff
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.669642866F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.705357134F, 1.0F, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - - PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff 
    // - - Transforms for Controls - 01 - Check - 01 - NormalOnToNormalOff  Scale(1,1,0)
    // -  Offset:<24, 24>
    // TrimStart
    ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_2()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.0357142873F, 1.0F, _cubicBezierEasingFunction_2);
        return result;
    }

    // PreComp layer: Indeterminate State
    // Shape tree root for layer: Shape Layer 1
    ShapeVisual ShapeVisual_00()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_00());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 18 - PressedOffToNormalOn
    // Layer aggregator
    ShapeVisual ShapeVisual_01()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Check - PressedOffToNormalOn
        shapes.Append(SpriteShape_01());
        // Layer: Check - PressedOffToNormalOn
        shapes.Append(SpriteShape_02());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 17 - PressedOffToPointerOverOn
    // Layer aggregator
    ShapeVisual ShapeVisual_02()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Check - PressedOffToPointerOverOn
        shapes.Append(SpriteShape_03());
        // Layer: Check - PressedOffToPointerOverOn
        shapes.Append(SpriteShape_04());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 16 - PressedOffToPressedOn
    // Shape tree root for layer: Check - PressedOffToPressedOn
    ShapeVisual ShapeVisual_03()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_05());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_0p35_to_1_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 15 - PressedOnToNormalOff
    // Shape tree root for layer: Check - PressedOnToNormalOff
    ShapeVisual ShapeVisual_04()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_06());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 14 - PressedOnToPointerOverOff
    // Layer aggregator
    ShapeVisual ShapeVisual_05()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Check - PressedOnToPointerOverOff
        shapes.Append(SpriteShape_07());
        // Layer: Check - PressedOnToPointerOverOff
        shapes.Append(SpriteShape_08());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 13 - PressedOnToPressedOff
    // Shape tree root for layer: Check - PressedOnToPressedOff
    ShapeVisual ShapeVisual_06()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_09());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_1_to_0p35_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 12 - PointerOverOffToPressedOff
    // Shape tree root for layer: Check - PointerOverOffToPressedOff
    ShapeVisual ShapeVisual_07()
    {
        const auto result = _c.CreateShapeVisual();
        result.Opacity(0.349999994F);
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_10());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 11 - PointerOverOffToNormalOff
    // Shape tree root for layer: Check - PointerOverOffToNormalOff
    ShapeVisual ShapeVisual_08()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_11());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_0p35_to_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 10 - PointerOverOffToPointerOverOn
    // Shape tree root for layer: Check - PointerOverOffToPointerOverOn
    ShapeVisual ShapeVisual_09()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_12());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_0p35_to_1_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 09 - PointerOverOnToPressedOn
    // Shape tree root for layer: Check - PointerOverOnToPressedOn
    ShapeVisual ShapeVisual_10()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_13());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 08 - PointerOverOnToNormalOn
    // Shape tree root for layer: Check - PointerOverOnToNormalOn
    ShapeVisual ShapeVisual_11()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_14());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 07 - PointerOverOnToPointerOverOff
    // Shape tree root for layer: Check - PointerOverOnToPointerOverOff
    ShapeVisual ShapeVisual_12()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_15());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_1_to_0p35_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 06 - NormalOffToPressedOff
    // Shape tree root for layer: Check - NormalOffToPressedOff
    ShapeVisual ShapeVisual_13()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_16());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_0_to_0p35_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 05 - NormalOffToPointerOverOff
    // Shape tree root for layer: Check - NormalOffToPointerOverOff
    ShapeVisual ShapeVisual_14()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_17());
        StartProgressBoundAnimation(result, L"Opacity", OpacityScalarAnimation_0_to_0p35_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 04 - NormalOffToNormalOn
    // Shape tree root for layer: Check - NormalOffToNormalOn
    ShapeVisual ShapeVisual_15()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_18());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 03 - NormalOnToPressedOn
    // Shape tree root for layer: Check - NormalOnToPressedOn
    ShapeVisual ShapeVisual_16()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_19());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 02 - NormalOnToPointerOverOn
    // Shape tree root for layer: Check - NormalOnToPointerOverOn
    ShapeVisual ShapeVisual_17()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_20());
        return result;
    }

    // PreComp layer: Controls - 01 - Check - 01 - NormalOnToNormalOff 
    // Shape tree root for layer: Check - NormalOnToNormalOff
    ShapeVisual ShapeVisual_18()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Offset:<24, 24>
        result.Shapes().Append(SpriteShape_21());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_01_Checkmark_AnimatedVisual(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 Controls_01_Checkmark::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet Controls_01_Checkmark::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color Controls_01_Checkmark::Foreground()
{
    return _themeForeground;
}

void Controls_01_Checkmark::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_01_Checkmark::TryCreateAnimatedVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_01_Checkmark::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (Controls_01_Checkmark_AnimatedVisual::IsRuntimeCompatible())
    {
        return winrt::make<Controls_01_Checkmark_AnimatedVisual>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

double Controls_01_Checkmark::FrameCount()
{
    return 224.0;
}

double Controls_01_Checkmark::Framerate()
{
    return 60.0;
}

TimeSpan Controls_01_Checkmark::Duration()
{
    return TimeSpan{ 37333333L };
}

double Controls_01_Checkmark::FrameToProgress(double frameNumber)
{
    return frameNumber / 224.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_01_Checkmark::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalOnToNormalOff_Start", 0.0 },
            { L"NormalOnToNormalOff_End", 0.0402232142857143 },
            { L"NormalOnToPointerOverOn_Start", 0.0491517857142857 },
            { L"NormalOnToPointerOverOn_End", 0.0804017857142857 },
            { L"NormalOnToPressedOn_Start", 0.0893303571428572 },
            { L"NormalOnToPressedOn_End", 0.129508928571429 },
            { L"NormalOffToNormalOn_Start", 0.133973214285714 },
            { L"NormalOffToNormalOn_End", 0.2634375 },
            { L"NormalOffToPointerOverOff_Start", 0.267901785714286 },
            { L"NormalOffToPointerOverOff_End", 0.308080357142857 },
            { L"NormalOffToPressedOff_Start", 0.312544642857143 },
            { L"NormalOffToPressedOff_End", 0.352723214285714 },
            { L"PointerOverOnToPointerOverOff_Start", 0.3571875 },
            { L"PointerOverOnToPointerOverOff_End", 0.397366071428571 },
            { L"PointerOverOnToNormalOn_Start", 0.401830357142857 },
            { L"PointerOverOnToNormalOn_End", 0.442008928571429 },
            { L"PointerOverOnToPressedOn_Start", 0.446473214285714 },
            { L"PointerOverOnToPressedOn_End", 0.486651785714286 },
            { L"PointerOverOffToPointerOverOn_Start", 0.491116071428571 },
            { L"PointerOverOffToPointerOverOn_End", 0.531294642857143 },
            { L"PointerOverOffToNormalOff_Start", 0.540223214285714 },
            { L"PointerOverOffToNormalOff_End", 0.5759375 },
            { L"PointerOverOffToPressedOff_Start", 0.580401785714286 },
            { L"PointerOverOffToPressedOff_End", 0.620580357142857 },
            { L"PressedOnToPressedOff_Start", 0.625044642857143 },
            { L"PressedOnToPressedOff_End", 0.665223214285714 },
            { L"PressedOnToPointerOverOff_Start", 0.6696875 },
            { L"PressedOnToPointerOverOff_End", 0.709866071428571 },
            { L"PressedOnToNormalOff_Start", 0.714330357142857 },
            { L"PressedOnToNormalOff_End", 0.754508928571428 },
            { L"PressedOffToPressedOn_Start", 0.758973214285714 },
            { L"PressedOffToPressedOn_End", 0.799151785714286 },
            { L"PressedOffToPointerOverOn_Start", 0.803616071428571 },
            { L"PressedOffToPointerOverOn_End", 0.8884375 },
            { L"PressedOffToNormalOn_Start", 0.892901785714286 },
            { L"PressedOffToNormalOn_End", 0.977723214285714 },
            { L"IndeterminateNormal", 0.9821875 },
            { L"IndeterminatePointerOver", 0.986651785714286 },
            { L"IndeterminatePressed", 0.991116071428571 },
        }
    ).GetView();
}

void Controls_01_Checkmark::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void Controls_01_Checkmark::SetScalarProperty(hstring const&, double)
{
}
