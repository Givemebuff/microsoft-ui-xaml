//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.104+geebe28e7e9
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile Controls_03_Back.json
//       
//       Input file:
//           Controls_03_Back.json (16523 bytes created 12:28-08:00 Feb 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           141 |          111 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            19 |           13 |
// | KeyFrame animators       |            18 |           12 |
// | Reference parameters     |            19 |           13 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             2 |            2 |
// | PathKeyFrameAnimations   |             6 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             7 |            7 |
// | ShapeVisuals             |             6 |            6 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             6 |            6 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
#include "pch.h"
#include "AnimatedVisuals\Controls_03_Back.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(Controls_03_Back)
}
#include "AnimatedVisuals\Controls_03_Back.g.cpp"

class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};
class Controls_03_Back_AnimatedVisual_UAPv11 : public winrt::implements<Controls_03_Back_AnimatedVisual_UAPv11,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 8333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionPath _path_0{ nullptr };
    CompositionPath _path_1{ nullptr };
    CompositionPath _path_2{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreatePathKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector2KeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.899999976F, true);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.600000024F, true);
        result.InsertKeyFrame(0.899999976F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.5F, true);
        result.InsertKeyFrame(0.600000024F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.300000012F, true);
        result.InsertKeyFrame(0.5F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, true);
        result.InsertKeyFrame(0.300000012F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, false);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.282000005F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -0.0780000016F, 7.0539999F }, { 0.238999993F, 7.03999996F }, { 0.425000012F, 6.83599997F } });
        sink->AddBezier({ { 0.611000001F, 6.63199997F }, { 0.597000003F, 6.31500006F }, { 0.393000007F, 6.12900019F } });
        sink->AddBezier({ { 0.393000007F, 6.12900019F }, { -5.7750001F, 0.499000013F }, { -5.7750001F, 0.499000013F } });
        sink->AddBezier({ { -5.7750001F, 0.499000013F }, { 10.0279999F, 0.499000013F }, { 10.0279999F, 0.499000013F } });
        sink->AddBezier({ { 10.3039999F, 0.499000013F }, { 10.5279999F, 0.275000006F }, { 10.5279999F, -0.00100000005F } });
        sink->AddBezier({ { 10.5279999F, -0.27700001F }, { 10.3039999F, -0.500999987F }, { 10.0279999F, -0.500999987F } });
        sink->AddBezier({ { 10.0279999F, -0.500999987F }, { -5.77199984F, -0.500999987F }, { -5.77199984F, -0.500999987F } });
        sink->AddBezier({ { -5.77199984F, -0.500999987F }, { 0.393000007F, -6.12900019F }, { 0.393000007F, -6.12900019F } });
        sink->AddBezier({ { 0.597000003F, -6.31500006F }, { 0.611000001F, -6.63199997F }, { 0.425000012F, -6.83599997F } });
        sink->AddBezier({ { 0.238999993F, -7.03999996F }, { -0.0780000016F, -7.0539999F }, { -0.282000005F, -6.86800003F } });
        sink->AddBezier({ { -0.282000005F, -6.86800003F }, { -7.19799995F, -0.55400002F }, { -7.19799995F, -0.55400002F } });
        sink->AddBezier({ { -7.33799982F, -0.425999999F }, { -7.41699982F, -0.257999986F }, { -7.4369998F, -0.0850000009F } });
        sink->AddBezier({ { -7.44199991F, -0.0579999983F }, { -7.44399977F, -0.0299999993F }, { -7.44399977F, -0.00100000005F } });
        sink->AddBezier({ { -7.44399977F, 0.0260000005F }, { -7.44199991F, 0.0520000011F }, { -7.4380002F, 0.0780000016F } });
        sink->AddBezier({ { -7.42000008F, 0.254000008F }, { -7.34000015F, 0.423999995F }, { -7.19799995F, 0.55400002F } });
        sink->AddBezier({ { -7.19799995F, 0.55400002F }, { -0.282000005F, 6.86800003F }, { -0.282000005F, 6.86800003F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 1.38499999F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 1.58899999F, 7.0539999F }, { 1.90499997F, 7.03999996F }, { 2.09100008F, 6.83599997F } });
        sink->AddBezier({ { 2.27699995F, 6.63199997F }, { 2.26300001F, 6.31500006F }, { 2.05900002F, 6.12900019F } });
        sink->AddBezier({ { 2.05900002F, 6.12900019F }, { -4.10900021F, 0.499000013F }, { -4.10900021F, 0.499000013F } });
        sink->AddBezier({ { -4.10900021F, 0.499000013F }, { 8.61100006F, 0.499000013F }, { 8.61100006F, 0.499000013F } });
        sink->AddBezier({ { 8.88700008F, 0.499000013F }, { 9.11100006F, 0.275000006F }, { 9.11100006F, -0.00100000005F } });
        sink->AddBezier({ { 9.11100006F, -0.27700001F }, { 8.88700008F, -0.500999987F }, { 8.61100006F, -0.500999987F } });
        sink->AddBezier({ { 8.61100006F, -0.500999987F }, { -4.10599995F, -0.500999987F }, { -4.10599995F, -0.500999987F } });
        sink->AddBezier({ { -4.10599995F, -0.500999987F }, { 2.05900002F, -6.12900019F }, { 2.05900002F, -6.12900019F } });
        sink->AddBezier({ { 2.26300001F, -6.31500006F }, { 2.27699995F, -6.63199997F }, { 2.09100008F, -6.83599997F } });
        sink->AddBezier({ { 1.90499997F, -7.03999996F }, { 1.58899999F, -7.0539999F }, { 1.38499999F, -6.86800003F } });
        sink->AddBezier({ { 1.38499999F, -6.86800003F }, { -5.53100014F, -0.55400002F }, { -5.53100014F, -0.55400002F } });
        sink->AddBezier({ { -5.671F, -0.425999999F }, { -5.75099993F, -0.257999986F }, { -5.77099991F, -0.0850000009F } });
        sink->AddBezier({ { -5.77600002F, -0.0579999983F }, { -5.77799988F, -0.0299999993F }, { -5.77799988F, -0.00100000005F } });
        sink->AddBezier({ { -5.77799988F, 0.0260000005F }, { -5.77600002F, 0.0520000011F }, { -5.77199984F, 0.0780000016F } });
        sink->AddBezier({ { -5.75400019F, 0.254000008F }, { -5.67299986F, 0.423999995F }, { -5.53100014F, 0.55400002F } });
        sink->AddBezier({ { -5.53100014F, 0.55400002F }, { 1.38499999F, 6.86800003F }, { 1.38499999F, 6.86800003F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_2()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.837000012F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -0.633000016F, 7.0539999F }, { -0.317000002F, 7.03999996F }, { -0.130999997F, 6.83599997F } });
        sink->AddBezier({ { 0.0549999997F, 6.63199997F }, { 0.0410000011F, 6.31500006F }, { -0.163000003F, 6.12900019F } });
        sink->AddBezier({ { -0.163000003F, 6.12900019F }, { -6.33099985F, 0.499000013F }, { -6.33099985F, 0.499000013F } });
        sink->AddBezier({ { -6.33099985F, 0.499000013F }, { 7.5F, 0.499000013F }, { 7.5F, 0.499000013F } });
        sink->AddBezier({ { 7.77600002F, 0.499000013F }, { 8.0F, 0.275000006F }, { 8.0F, -0.00100000005F } });
        sink->AddBezier({ { 8.0F, -0.27700001F }, { 7.77600002F, -0.500999987F }, { 7.5F, -0.500999987F } });
        sink->AddBezier({ { 7.5F, -0.500999987F }, { -6.32800007F, -0.500999987F }, { -6.32800007F, -0.500999987F } });
        sink->AddBezier({ { -6.32800007F, -0.500999987F }, { -0.163000003F, -6.12900019F }, { -0.163000003F, -6.12900019F } });
        sink->AddBezier({ { 0.0410000011F, -6.31500006F }, { 0.0549999997F, -6.63199997F }, { -0.130999997F, -6.83599997F } });
        sink->AddBezier({ { -0.317000002F, -7.03999996F }, { -0.633000016F, -7.0539999F }, { -0.837000012F, -6.86800003F } });
        sink->AddBezier({ { -0.837000012F, -6.86800003F }, { -7.75299978F, -0.55400002F }, { -7.75299978F, -0.55400002F } });
        sink->AddBezier({ { -7.89300013F, -0.425999999F }, { -7.97300005F, -0.257999986F }, { -7.99300003F, -0.0850000009F } });
        sink->AddBezier({ { -7.99800014F, -0.0579999983F }, { -8.0F, -0.0299999993F }, { -8.0F, -0.00100000005F } });
        sink->AddBezier({ { -8.0F, 0.0260000005F }, { -7.99800014F, 0.0520000011F }, { -7.99399996F, 0.0780000016F } });
        sink->AddBezier({ { -7.97599983F, 0.254000008F }, { -7.89499998F, 0.423999995F }, { -7.75299978F, 0.55400002F } });
        sink->AddBezier({ { -7.75299978F, 0.55400002F }, { -0.837000012F, 6.86800003F }, { -0.837000012F, 6.86800003F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    CompositionPath Path_0()
    {
        const auto result = _path_0 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0()));
        return result;
    }

    CompositionPath Path_1()
    {
        const auto result = _path_1 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1()));
        return result;
    }

    CompositionPath Path_2()
    {
        const auto result = _path_2 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2()));
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // - Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_0()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_0(), RootProgress());
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // - Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_1()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_1(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // - Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_2()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_2(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // - Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_3()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_3(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // - Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_4()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_4(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // - Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    CompositionPathGeometry PathGeometry_5()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_5(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_0()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_0());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(ThemeColor_Foreground());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_1()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_1());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_2()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_2());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_3()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_3());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_3(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_4()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_4());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_4(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_5()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_5());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.100000001F, 0.0F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_2()
    {
        return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.550000012F, 0.0F }, { 0.449999988F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // - - Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_0()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, Path_0(), StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.899999976F, _path_0, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.980000019F, Path_1(), CubicBezierEasingFunction_0());
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // - - Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_1()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_0, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, _path_0, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, Path_2(), CubicBezierEasingFunction_1());
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // - - Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_2()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_1, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, _path_1, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, _path_0, CubicBezierEasingFunction_2());
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // - - Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_3()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_1, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, _path_1, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, _path_2, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // - - Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_4()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_2, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, _path_2, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, _path_0, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // - - Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // - ShapeGroup: Group 1
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_5()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_2, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, _path_1, _cubicBezierEasingFunction_0);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_0());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_1());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_2());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // Shape tree root for layer: BackArrow
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_3());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // Shape tree root for layer: BackArrow 2
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_4());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // Shape tree root for layer: BackArrow 2
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_5());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // - Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_0()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 18.25F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.899999976F, { 18.25F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.980000019F, { 21.5F, 24.0F }, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // - Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_1()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 18.25F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, { 18.25F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, { 24.0F, 24.0F }, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // - Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_2()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 21.5F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, { 21.5F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, { 18.25F, 24.0F }, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // - Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_3()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 21.5F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, { 21.5F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, { 24.0F, 24.0F }, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // - Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_4()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 24.0F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, { 24.0F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, { 18.25F, 24.0F }, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // - Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_5()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 24.0F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, { 21.5F, 24.0F }, _cubicBezierEasingFunction_0);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_03_Back_AnimatedVisual_UAPv11(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 11);
    }
};

class Controls_03_Back_AnimatedVisual_UAPv7 : public winrt::implements<Controls_03_Back_AnimatedVisual_UAPv7,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 8333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionPathGeometry _pathGeometry_0{ nullptr };
    CompositionPathGeometry _pathGeometry_1{ nullptr };
    CompositionPathGeometry _pathGeometry_2{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector2KeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.899999976F, true);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.600000024F, true);
        result.InsertKeyFrame(0.899999976F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.5F, true);
        result.InsertKeyFrame(0.600000024F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.300000012F, true);
        result.InsertKeyFrame(0.5F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, true);
        result.InsertKeyFrame(0.300000012F, false);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, false);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.282000005F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -0.0780000016F, 7.0539999F }, { 0.238999993F, 7.03999996F }, { 0.425000012F, 6.83599997F } });
        sink->AddBezier({ { 0.611000001F, 6.63199997F }, { 0.597000003F, 6.31500006F }, { 0.393000007F, 6.12900019F } });
        sink->AddLine({ -5.7750001F, 0.499000013F });
        sink->AddLine({ 10.0279999F, 0.499000013F });
        sink->AddBezier({ { 10.3039999F, 0.499000013F }, { 10.5279999F, 0.275000006F }, { 10.5279999F, -0.00100000005F } });
        sink->AddBezier({ { 10.5279999F, -0.27700001F }, { 10.3039999F, -0.500999987F }, { 10.0279999F, -0.500999987F } });
        sink->AddLine({ -5.77199984F, -0.500999987F });
        sink->AddLine({ 0.393000007F, -6.12900019F });
        sink->AddBezier({ { 0.597000003F, -6.31500006F }, { 0.611000001F, -6.63199997F }, { 0.425000012F, -6.83599997F } });
        sink->AddBezier({ { 0.238999993F, -7.03999996F }, { -0.0780000016F, -7.0539999F }, { -0.282000005F, -6.86800003F } });
        sink->AddLine({ -7.19799995F, -0.55400002F });
        sink->AddBezier({ { -7.33799982F, -0.425999999F }, { -7.41699982F, -0.257999986F }, { -7.4369998F, -0.0850000009F } });
        sink->AddBezier({ { -7.44199991F, -0.0579999983F }, { -7.44399977F, -0.0299999993F }, { -7.44399977F, -0.00100000005F } });
        sink->AddBezier({ { -7.44399977F, 0.0260000005F }, { -7.44199991F, 0.0520000011F }, { -7.4380002F, 0.0780000016F } });
        sink->AddBezier({ { -7.42000008F, 0.254000008F }, { -7.34000015F, 0.423999995F }, { -7.19799995F, 0.55400002F } });
        sink->AddLine({ -0.282000005F, 6.86800003F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 1.38499999F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 1.58899999F, 7.0539999F }, { 1.90499997F, 7.03999996F }, { 2.09100008F, 6.83599997F } });
        sink->AddBezier({ { 2.27699995F, 6.63199997F }, { 2.26300001F, 6.31500006F }, { 2.05900002F, 6.12900019F } });
        sink->AddLine({ -4.10900021F, 0.499000013F });
        sink->AddLine({ 8.61100006F, 0.499000013F });
        sink->AddBezier({ { 8.88700008F, 0.499000013F }, { 9.11100006F, 0.275000006F }, { 9.11100006F, -0.00100000005F } });
        sink->AddBezier({ { 9.11100006F, -0.27700001F }, { 8.88700008F, -0.500999987F }, { 8.61100006F, -0.500999987F } });
        sink->AddLine({ -4.10599995F, -0.500999987F });
        sink->AddLine({ 2.05900002F, -6.12900019F });
        sink->AddBezier({ { 2.26300001F, -6.31500006F }, { 2.27699995F, -6.63199997F }, { 2.09100008F, -6.83599997F } });
        sink->AddBezier({ { 1.90499997F, -7.03999996F }, { 1.58899999F, -7.0539999F }, { 1.38499999F, -6.86800003F } });
        sink->AddLine({ -5.53100014F, -0.55400002F });
        sink->AddBezier({ { -5.671F, -0.425999999F }, { -5.75099993F, -0.257999986F }, { -5.77099991F, -0.0850000009F } });
        sink->AddBezier({ { -5.77600002F, -0.0579999983F }, { -5.77799988F, -0.0299999993F }, { -5.77799988F, -0.00100000005F } });
        sink->AddBezier({ { -5.77799988F, 0.0260000005F }, { -5.77600002F, 0.0520000011F }, { -5.77199984F, 0.0780000016F } });
        sink->AddBezier({ { -5.75400019F, 0.254000008F }, { -5.67299986F, 0.423999995F }, { -5.53100014F, 0.55400002F } });
        sink->AddLine({ 1.38499999F, 6.86800003F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_2()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.837000012F, 6.86800003F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -0.633000016F, 7.0539999F }, { -0.317000002F, 7.03999996F }, { -0.130999997F, 6.83599997F } });
        sink->AddBezier({ { 0.0549999997F, 6.63199997F }, { 0.0410000011F, 6.31500006F }, { -0.163000003F, 6.12900019F } });
        sink->AddLine({ -6.33099985F, 0.499000013F });
        sink->AddLine({ 7.5F, 0.499000013F });
        sink->AddBezier({ { 7.77600002F, 0.499000013F }, { 8.0F, 0.275000006F }, { 8.0F, -0.00100000005F } });
        sink->AddBezier({ { 8.0F, -0.27700001F }, { 7.77600002F, -0.500999987F }, { 7.5F, -0.500999987F } });
        sink->AddLine({ -6.32800007F, -0.500999987F });
        sink->AddLine({ -0.163000003F, -6.12900019F });
        sink->AddBezier({ { 0.0410000011F, -6.31500006F }, { 0.0549999997F, -6.63199997F }, { -0.130999997F, -6.83599997F } });
        sink->AddBezier({ { -0.317000002F, -7.03999996F }, { -0.633000016F, -7.0539999F }, { -0.837000012F, -6.86800003F } });
        sink->AddLine({ -7.75299978F, -0.55400002F });
        sink->AddBezier({ { -7.89300013F, -0.425999999F }, { -7.97300005F, -0.257999986F }, { -7.99300003F, -0.0850000009F } });
        sink->AddBezier({ { -7.99800014F, -0.0579999983F }, { -8.0F, -0.0299999993F }, { -8.0F, -0.00100000005F } });
        sink->AddBezier({ { -8.0F, 0.0260000005F }, { -7.99800014F, 0.0520000011F }, { -7.99399996F, 0.0780000016F } });
        sink->AddBezier({ { -7.97599983F, 0.254000008F }, { -7.89499998F, 0.423999995F }, { -7.75299978F, 0.55400002F } });
        sink->AddLine({ -0.837000012F, 6.86800003F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    CompositionPathGeometry PathGeometry_0()
    {
        return _pathGeometry_0 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
    }

    CompositionPathGeometry PathGeometry_1()
    {
        return _pathGeometry_1 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())));
    }

    CompositionPathGeometry PathGeometry_2()
    {
        return _pathGeometry_2 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())));
    }

    // - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_0()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_0());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(ThemeColor_Foreground());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), RootProgress());
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_1()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_0);
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_2()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_1());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_3()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_1);
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_3(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_4()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_2());
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_4(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_5()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_2);
        result.Scale({ 2.25F, 2.25F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.550000012F, 0.0F }, { 0.449999988F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_0());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_1());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // Shape tree root for layer: BackArrow 3
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_2());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // Shape tree root for layer: BackArrow
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_3());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // Shape tree root for layer: BackArrow 2
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_4());
        return result;
    }

    // PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // Shape tree root for layer: BackArrow 2
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_5());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 06 - PressedToPointerOver
    // - Transforms for Controls - 03 - Back - 06 - PressedToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_0()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 18.25F, 24.0F }, StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.899999976F, { 18.25F, 24.0F }, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.980000019F, { 21.5F, 24.0F }, CubicBezierEasingFunction_0());
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 05 - PressedToNormal
    // - Transforms for Controls - 03 - Back - 05 - PressedToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_1()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 18.25F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, { 18.25F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, { 24.0F, 24.0F }, _c.CreateCubicBezierEasingFunction({ 0.100000001F, 0.0F }, { 0.0F, 1.0F }));
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 04 - PointerOverToPressed 
    // - Transforms for Controls - 03 - Back - 04 - PointerOverToPressed  Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_2()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 21.5F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, { 21.5F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, { 18.25F, 24.0F }, CubicBezierEasingFunction_1());
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 03 - PointerOverToNormal
    // - Transforms for Controls - 03 - Back - 03 - PointerOverToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_3()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 21.5F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, { 21.5F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, { 24.0F, 24.0F }, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 02 - NormalToPressed
    // - Transforms for Controls - 03 - Back - 02 - NormalToPressed Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_4()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 24.0F, 24.0F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, { 24.0F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, { 18.25F, 24.0F }, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 03 - Back - 01 - NormalToPointerOver
    // - Transforms for Controls - 03 - Back - 01 - NormalToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_5()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 24.0F, 24.0F }, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, { 21.5F, 24.0F }, _cubicBezierEasingFunction_0);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_03_Back_AnimatedVisual_UAPv7(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 Controls_03_Back::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet Controls_03_Back::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color Controls_03_Back::Foreground()
{
    return _themeForeground;
}

void Controls_03_Back::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_03_Back::TryCreateAnimatedVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_03_Back::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (Controls_03_Back_AnimatedVisual_UAPv11::IsRuntimeCompatible())
    {
        return winrt::make<Controls_03_Back_AnimatedVisual_UAPv11>(
            compositor,
            _themeProperties);
    }

    if (Controls_03_Back_AnimatedVisual_UAPv7::IsRuntimeCompatible())
    {
        return winrt::make<Controls_03_Back_AnimatedVisual_UAPv7>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

double Controls_03_Back::FrameCount()
{
    return 50.0;
}

double Controls_03_Back::Framerate()
{
    return 60.0;
}

TimeSpan Controls_03_Back::Duration()
{
    return TimeSpan{ 8333333L };
}

double Controls_03_Back::FrameToProgress(double frameNumber)
{
    return frameNumber / 50.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_03_Back::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalToPointerOver_Start", 0.0 },
            { L"NormalToPointerOver_End", 0.1802 },
            { L"NormalToPressed_Start", 0.2002 },
            { L"NormalToPressed_End", 0.2802 },
            { L"PointerOverToNormal_Start", 0.3002 },
            { L"PointerOverToNormal_End", 0.4802 },
            { L"PointerOverToPressed_Start", 0.5002 },
            { L"PointerOverToPressed_End", 0.5802 },
            { L"PressedToNormal_Start", 0.6002 },
            { L"PressedToNormal_End", 0.8802 },
            { L"PressedToPointerOver_Start", 0.9002 },
            { L"PressedToPointerOver_End", 0.9802 },
        }
    ).GetView();
}

void Controls_03_Back::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void Controls_03_Back::SetScalarProperty(hstring const&, double)
{
}
