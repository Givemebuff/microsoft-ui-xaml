//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.104+geebe28e7e9
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile Controls_05_Search.json
//       
//       Input file:
//           Controls_05_Search.json (18446 bytes created 12:28-08:00 Feb 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           179 |          149 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            25 |           19 |
// | KeyFrame animators       |            24 |           18 |
// | Reference parameters     |            25 |           19 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             2 |            2 |
// | PathKeyFrameAnimations   |             6 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             7 |            7 |
// | ShapeVisuals             |             6 |            6 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             6 |            6 |
// | CompositionSpriteShapes  |            12 |           12 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
#include "pch.h"
#include "AnimatedVisuals\Controls_05_Search.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(Controls_05_Search)
}
#include "AnimatedVisuals\Controls_05_Search.g.cpp"

class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};
class Controls_05_Search_AnimatedVisual_UAPv11 : public winrt::implements<Controls_05_Search_AnimatedVisual_UAPv11,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 8333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionEllipseGeometry _ellipse_14p188{ nullptr };
    CompositionPath _path_0{ nullptr };
    CompositionPath _path_1{ nullptr };
    CompositionPath _path_2{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_0p95_to_1{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_0p95_to_1p2{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1_to_0p95{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1_to_1p2{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1p2_to_0p95{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1p2_to_1{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreatePathKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix, CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.899999976F, true);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.600000024F, true);
        result.InsertKeyFrame(0.899999976F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.5F, true);
        result.InsertKeyFrame(0.600000024F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.300000012F, true);
        result.InsertKeyFrame(0.5F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, true);
        result.InsertKeyFrame(0.300000012F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, false);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 13.1239996F, 277.981995F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 13.1239996F, 277.981995F }, { 9.88700008F, 281.195007F }, { 9.88700008F, 281.195007F } });
        sink->AddBezier({ { 9.72000027F, 281.362F }, { 9.72000027F, 281.634003F }, { 9.88700008F, 281.800995F } });
        sink->AddBezier({ { 10.0360003F, 281.950012F }, { 10.2670002F, 281.96701F }, { 10.434F, 281.851013F } });
        sink->AddBezier({ { 10.434F, 281.851013F }, { 10.4940004F, 281.800995F }, { 10.4940004F, 281.800995F } });
        sink->AddBezier({ { 10.4940004F, 281.800995F }, { 13.7299995F, 278.588013F }, { 13.7299995F, 278.588013F } });
        sink->AddBezier({ { 13.7299995F, 278.588013F }, { 13.8640003F, 277.920013F }, { 13.8640003F, 277.920013F } });
        sink->AddBezier({ { 13.8640003F, 277.920013F }, { 13.1239996F, 277.981995F }, { 13.1239996F, 277.981995F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 12.5550003F, 278.537994F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 12.5550003F, 278.537994F }, { 9.00599957F, 282.063995F }, { 9.00599957F, 282.063995F } });
        sink->AddBezier({ { 8.83899975F, 282.230988F }, { 8.83899975F, 282.502991F }, { 9.00599957F, 282.670013F } });
        sink->AddBezier({ { 9.15499973F, 282.819F }, { 9.38599968F, 282.835999F }, { 9.55300045F, 282.720001F } });
        sink->AddBezier({ { 9.55300045F, 282.720001F }, { 9.61200047F, 282.670013F }, { 9.61200047F, 282.670013F } });
        sink->AddBezier({ { 9.61200047F, 282.670013F }, { 13.1610003F, 279.144012F }, { 13.1610003F, 279.144012F } });
        sink->AddBezier({ { 13.1610003F, 279.144012F }, { 13.2959995F, 278.47699F }, { 13.2959995F, 278.47699F } });
        sink->AddBezier({ { 13.2959995F, 278.47699F }, { 12.5550003F, 278.537994F }, { 12.5550003F, 278.537994F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_2()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 12.96F, 278.109985F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 12.96F, 278.109985F }, { 9.42300034F, 281.64801F }, { 9.42300034F, 281.64801F } });
        sink->AddBezier({ { 9.25599957F, 281.815002F }, { 9.25599957F, 282.087006F }, { 9.42300034F, 282.253998F } });
        sink->AddBezier({ { 9.57199955F, 282.403015F }, { 9.80300045F, 282.419006F }, { 9.97000027F, 282.303009F } });
        sink->AddBezier({ { 9.97000027F, 282.303009F }, { 10.0290003F, 282.253998F }, { 10.0290003F, 282.253998F } });
        sink->AddBezier({ { 10.0290003F, 282.253998F }, { 13.566F, 278.716003F }, { 13.566F, 278.716003F } });
        sink->AddBezier({ { 13.566F, 278.716003F }, { 13.7010002F, 278.049011F }, { 13.7010002F, 278.049011F } });
        sink->AddBezier({ { 13.7010002F, 278.049011F }, { 12.96F, 278.109985F }, { 12.96F, 278.109985F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_0()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_01());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p95_to_1p2(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p95_to_1p2, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_1()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_03());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p95_to_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p95_to_1, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionContainerShape ContainerShape_2()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_05());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1p2_to_0p95(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1p2_to_0p95, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_3()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_07());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1p2_to_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1p2_to_1, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionContainerShape ContainerShape_4()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_09());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_0p95(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_0p95, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_5()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_11());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1p2(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1p2, _rootProgress);
        return result;
    }

    // Ellipse Path 1.EllipseGeometry
    CompositionEllipseGeometry Ellipse_14p188()
    {
        const auto result = _ellipse_14p188 = _c.CreateEllipseGeometry();
        result.Radius({ 14.1875F, 14.1875F });
        return result;
    }

    CompositionPath Path_0()
    {
        const auto result = _path_0 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0()));
        return result;
    }

    CompositionPath Path_1()
    {
        const auto result = _path_1 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1()));
        return result;
    }

    CompositionPath Path_2()
    {
        const auto result = _path_2 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2()));
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // - Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionPathGeometry PathGeometry_0()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_0(), RootProgress());
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // - Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionPathGeometry PathGeometry_1()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_1(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // - Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionPathGeometry PathGeometry_2()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_2(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // - Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionPathGeometry PathGeometry_3()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_3(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // - Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionPathGeometry PathGeometry_4()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_4(), _rootProgress);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // - Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionPathGeometry PathGeometry_5()
    {
        const auto result = _c.CreatePathGeometry();
        StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_5(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_0(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, ThemeColor_Foreground());
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // - Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(Ellipse_14p188(), { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_02()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_1(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // - Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_2(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // - Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Layer 3
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_05()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_3(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // - Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_08()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_4(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // - Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Layer 3
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_5(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // - Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_11()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_2()
    {
        return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.550000012F, 0.0F }, { 0.75F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // - - Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // - Layer: Layer 2
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_0()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, Path_0(), StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.899999976F, _path_0, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.980000019F, Path_1(), CubicBezierEasingFunction_0());
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // - - Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // - Layer: Layer 2
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_1()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_0, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, _path_0, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, Path_2(), CubicBezierEasingFunction_1());
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // - - Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // - Layer: Layer 3
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_2()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_1, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, _path_1, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, _path_0, CubicBezierEasingFunction_2());
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // - - Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // - Layer: Layer 2
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_3()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_1, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, _path_1, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, _path_2, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // - - Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // - Layer: Layer 3
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_4()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_2, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, _path_2, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, _path_0, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // - - Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // - Layer: Layer 2
    // Path
    PathKeyFrameAnimation PathKeyFrameAnimation_5()
    {
        const auto result = CreatePathKeyFrameAnimation(0.0F, _path_2, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, _path_1, _cubicBezierEasingFunction_0);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_0p95_to_1()
    {
        const auto result = _scalarAnimation_0p95_to_1 = CreateScalarKeyFrameAnimation(0.0F, 0.949999988F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, 0.949999988F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, 1.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_0p95_to_1p2()
    {
        const auto result = _scalarAnimation_0p95_to_1p2 = CreateScalarKeyFrameAnimation(0.0F, 0.949999988F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.899999976F, 0.949999988F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.980000019F, 1.20000005F, _cubicBezierEasingFunction_0);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1_to_0p95()
    {
        const auto result = _scalarAnimation_1_to_0p95 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, 0.949999988F, _cubicBezierEasingFunction_2);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1_to_1p2()
    {
        const auto result = _scalarAnimation_1_to_1p2 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, 1.20000005F, _cubicBezierEasingFunction_0);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1p2_to_0p95()
    {
        const auto result = _scalarAnimation_1p2_to_0p95 = CreateScalarKeyFrameAnimation(0.0F, 1.20000005F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, 1.20000005F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, 0.949999988F, _cubicBezierEasingFunction_2);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1p2_to_1()
    {
        const auto result = _scalarAnimation_1p2_to_1 = CreateScalarKeyFrameAnimation(0.0F, 1.20000005F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, 1.20000005F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_00());
        // Layer: Layer 2
        shapes.Append(ContainerShape_0());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_02());
        // Layer: Layer 2
        shapes.Append(ContainerShape_1());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 3
        shapes.Append(SpriteShape_04());
        // Layer: Layer 3
        shapes.Append(ContainerShape_2());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_06());
        // Layer: Layer 2
        shapes.Append(ContainerShape_3());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 3
        shapes.Append(SpriteShape_08());
        // Layer: Layer 3
        shapes.Append(ContainerShape_4());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_10());
        // Layer: Layer 2
        shapes.Append(ContainerShape_5());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_05_Search_AnimatedVisual_UAPv11(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 11);
    }
};

class Controls_05_Search_AnimatedVisual_UAPv7 : public winrt::implements<Controls_05_Search_AnimatedVisual_UAPv7,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 8333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionEllipseGeometry _ellipse_14p188{ nullptr };
    CompositionPathGeometry _pathGeometry_0{ nullptr };
    CompositionPathGeometry _pathGeometry_1{ nullptr };
    CompositionPathGeometry _pathGeometry_2{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_0p95_to_1{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_0p95_to_1p2{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1_to_0p95{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1_to_1p2{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1p2_to_0p95{ nullptr };
    ScalarKeyFrameAnimation _scalarAnimation_1p2_to_1{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix, CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.899999976F, true);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.600000024F, true);
        result.InsertKeyFrame(0.899999976F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.5F, true);
        result.InsertKeyFrame(0.600000024F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.300000012F, true);
        result.InsertKeyFrame(0.5F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, true);
        result.InsertKeyFrame(0.300000012F, false);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        const auto result = CreateBooleanKeyFrameAnimation(0.200000003F, false);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 13.1239996F, 277.981995F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 9.88700008F, 281.195007F });
        sink->AddBezier({ { 9.72000027F, 281.362F }, { 9.72000027F, 281.634003F }, { 9.88700008F, 281.800995F } });
        sink->AddBezier({ { 10.0360003F, 281.950012F }, { 10.2670002F, 281.96701F }, { 10.434F, 281.851013F } });
        sink->AddLine({ 10.4940004F, 281.800995F });
        sink->AddLine({ 13.7299995F, 278.588013F });
        sink->AddLine({ 13.8640003F, 277.920013F });
        sink->AddLine({ 13.1239996F, 277.981995F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 12.5550003F, 278.537994F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 9.00599957F, 282.063995F });
        sink->AddBezier({ { 8.83899975F, 282.230988F }, { 8.83899975F, 282.502991F }, { 9.00599957F, 282.670013F } });
        sink->AddBezier({ { 9.15499973F, 282.819F }, { 9.38599968F, 282.835999F }, { 9.55300045F, 282.720001F } });
        sink->AddLine({ 9.61200047F, 282.670013F });
        sink->AddLine({ 13.1610003F, 279.144012F });
        sink->AddLine({ 13.2959995F, 278.47699F });
        sink->AddLine({ 12.5550003F, 278.537994F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_2()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 12.96F, 278.109985F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 9.42300034F, 281.64801F });
        sink->AddBezier({ { 9.25599957F, 281.815002F }, { 9.25599957F, 282.087006F }, { 9.42300034F, 282.253998F } });
        sink->AddBezier({ { 9.57199955F, 282.403015F }, { 9.80300045F, 282.419006F }, { 9.97000027F, 282.303009F } });
        sink->AddLine({ 10.0290003F, 282.253998F });
        sink->AddLine({ 13.566F, 278.716003F });
        sink->AddLine({ 13.7010002F, 278.049011F });
        sink->AddLine({ 12.96F, 278.109985F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_0()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_01());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p95_to_1p2(), RootProgress());
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p95_to_1p2, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_1()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_03());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p95_to_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p95_to_1, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionContainerShape ContainerShape_2()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_05());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1p2_to_0p95(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1p2_to_0p95, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_3()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_07());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1p2_to_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1p2_to_1, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Layer 3
    CompositionContainerShape ContainerShape_4()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_09());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_0p95(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_0p95, _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    CompositionContainerShape ContainerShape_5()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 3.81299996F, -3.93799996F });
        result.Offset({ 24.0F, 24.0F });
        // ShapeGroup: Ellipse 1 Scale:0.92286,0.92286, Offset:<3.812, -3.938>
        result.Shapes().Append(SpriteShape_11());
        StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1p2(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1p2, _rootProgress);
        return result;
    }

    // Ellipse Path 1.EllipseGeometry
    CompositionEllipseGeometry Ellipse_14p188()
    {
        const auto result = _ellipse_14p188 = _c.CreateEllipseGeometry();
        result.Radius({ 14.1875F, 14.1875F });
        return result;
    }

    CompositionPathGeometry PathGeometry_0()
    {
        return _pathGeometry_0 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
    }

    CompositionPathGeometry PathGeometry_1()
    {
        return _pathGeometry_1 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())));
    }

    CompositionPathGeometry PathGeometry_2()
    {
        return _pathGeometry_2 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())));
    }

    // - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_0(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, ThemeColor_Foreground());
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // - Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(Ellipse_14p188(), { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_02()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(_pathGeometry_0, { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // - Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_1(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // - Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Layer 3
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_05()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(_pathGeometry_1, { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // - Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_08()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(PathGeometry_2(), { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // - Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Layer 3
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 2
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<-21.893002, -805.13904>, Scale:<3, 3>
        const auto result = CreateSpriteShape(_pathGeometry_2, { 3.0F, 0.0F, 0.0F, 3.0F, -21.8930016F, -805.139038F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // - Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
    // Layer: Layer 2
    // Ellipse Path 1
    CompositionSpriteShape SpriteShape_11()
    {
        // Offset:<3.812, -3.938>, Scale:<0.92286, 0.92286>
        const auto result = CreateSpriteShape(_ellipse_14p188, { 0.922860026F, 0.0F, 0.0F, 0.922860026F, 3.81200004F, -3.93799996F });
        result.StrokeBrush(_themeColor_Foreground);
        result.StrokeThickness(2.0F);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 04 - PointerOverToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 05 - Search - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.550000012F, 0.0F }, { 0.75F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_0p95_to_1()
    {
        const auto result = _scalarAnimation_0p95_to_1 = CreateScalarKeyFrameAnimation(0.0F, 0.949999988F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.600000024F, 0.949999988F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.879999995F, 1.0F, _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F }));
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_0p95_to_1p2()
    {
        const auto result = _scalarAnimation_0p95_to_1p2 = CreateScalarKeyFrameAnimation(0.0F, 0.949999988F, StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.899999976F, 0.949999988F, HoldThenStepEasingFunction());
        result.InsertKeyFrame(0.980000019F, 1.20000005F, CubicBezierEasingFunction_0());
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1_to_0p95()
    {
        const auto result = _scalarAnimation_1_to_0p95 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.200000003F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.280000001F, 0.949999988F, _cubicBezierEasingFunction_1);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1_to_1p2()
    {
        const auto result = _scalarAnimation_1_to_1p2 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.180000007F, 1.20000005F, _cubicBezierEasingFunction_0);
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1p2_to_0p95()
    {
        const auto result = _scalarAnimation_1p2_to_0p95 = CreateScalarKeyFrameAnimation(0.0F, 1.20000005F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.5F, 1.20000005F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.579999983F, 0.949999988F, CubicBezierEasingFunction_1());
        return result;
    }

    // Scale
    ScalarKeyFrameAnimation ScalarAnimation_1p2_to_1()
    {
        const auto result = _scalarAnimation_1p2_to_1 = CreateScalarKeyFrameAnimation(0.0F, 1.20000005F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.300000012F, 1.20000005F, _holdThenStepEasingFunction);
        result.InsertKeyFrame(0.479999989F, 1.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 06 - PressedToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_00());
        // Layer: Layer 2
        shapes.Append(ContainerShape_0());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 05 - PressedToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_02());
        // Layer: Layer 2
        shapes.Append(ContainerShape_1());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 04 - PointerOverToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 3
        shapes.Append(SpriteShape_04());
        // Layer: Layer 3
        shapes.Append(ContainerShape_2());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 03 - PointerOverToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_06());
        // Layer: Layer 2
        shapes.Append(ContainerShape_3());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 02 - NormalToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 3
        shapes.Append(SpriteShape_08());
        // Layer: Layer 3
        shapes.Append(ContainerShape_4());
        return result;
    }

    // PreComp layer: Controls - 05 - Search - 01 - NormalToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Layer 2
        shapes.Append(SpriteShape_10());
        // Layer: Layer 2
        shapes.Append(ContainerShape_5());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_05_Search_AnimatedVisual_UAPv7(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 Controls_05_Search::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet Controls_05_Search::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color Controls_05_Search::Foreground()
{
    return _themeForeground;
}

void Controls_05_Search::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_05_Search::TryCreateAnimatedVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_05_Search::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (Controls_05_Search_AnimatedVisual_UAPv11::IsRuntimeCompatible())
    {
        return winrt::make<Controls_05_Search_AnimatedVisual_UAPv11>(
            compositor,
            _themeProperties);
    }

    if (Controls_05_Search_AnimatedVisual_UAPv7::IsRuntimeCompatible())
    {
        return winrt::make<Controls_05_Search_AnimatedVisual_UAPv7>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

double Controls_05_Search::FrameCount()
{
    return 50.0;
}

double Controls_05_Search::Framerate()
{
    return 60.0;
}

TimeSpan Controls_05_Search::Duration()
{
    return TimeSpan{ 8333333L };
}

double Controls_05_Search::FrameToProgress(double frameNumber)
{
    return frameNumber / 50.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_05_Search::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalToPointerOver_Start", 0.0 },
            { L"NormalToPointerOver_End", 0.1802 },
            { L"NormalToPressed_Start", 0.2002 },
            { L"NormalToPressed_End", 0.2802 },
            { L"PointerOverToNormal_Start", 0.3002 },
            { L"PointerOverToNormal_End", 0.4802 },
            { L"PointerOverToPressed_Start", 0.5002 },
            { L"PointerOverToPressed_End", 0.5802 },
            { L"PressedToNormal_Start", 0.6002 },
            { L"PressedToNormal_End", 0.8802 },
            { L"PressedToPointerOver_Start", 0.9002 },
            { L"PressedToPointerOver_End", 0.9802 },
        }
    ).GetView();
}

void Controls_05_Search::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void Controls_05_Search::SetScalarProperty(hstring const&, double)
{
}
